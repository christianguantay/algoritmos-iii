1) Aporte de los mensajes de DD
En un double dispatch (DD), ¿qué información aporta cada uno de los dos llamados?

El primer llamado en DD se encarga de aportar la lógica condicional del primer objeto polimorfico. El segundo llamado realiza lo mismo con el segundo objeto.


2) Lógica de instanciado
Con lo que vieron y saben hasta ahora, ¿donde les parece mejor tener la lógica de cómo instanciar un objeto? ¿por qué? ¿Y si se crea ese objeto desde diferentes lugares y de diferentes formas? ¿cómo lo resuelven?

Es mejor tener la lógica en la clase abstracta encargada del modelo que queremos hacer. La instansiacion es mejor tenerla agrupada sobre la superclaase en cuestión. En nuestro caso la superase era Numero y las subclases Entero y Fraccion.

3) Nombres de las categorías de métodos
Con lo que vieron y trabajaron hasta ahora, ¿qué criterio están usando para categorizar métodos?

Estamos utilizando el mismo nombre para los metidos declarados en la superclase.

4) Subclass Responsibility
Si todas las subclases saben responder un mismo mensaje, ¿por qué ponemos ese mensaje sólo con un “self subclassResponsibility” en la superclase? ¿para qué sirve?

Para que cada subclase tenga la responsabilidad de implementar la lógica del método en cuestión y no tenerla en la superase con un If por cada tipo de subclase.

5) No rompas
¿Por qué está mal/qué problemas trae romper encapsulamiento?

No es aconsejable romper encapsulamiento ya que un cambio en el funcionamiento implica un cambio en todas las clases que tengan este comportamiento modelado. Esto implica llevar un seguimiento de la funcionalidad constante.